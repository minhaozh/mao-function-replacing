IAT README [BETA] - 7/9/2009
This file serves as a quick guide to using the Instruction Analysis Tool (IAT).
For more information: http://wiki.corp.google.com/twiki/bin/view/Main/SMoC
(Wiki Update in Progress)
Contacts: Casey Burkhardt - caseyburkhardt@google.com
          Sweta Mohapatra - smohapatra@google.com

Please check the Wiki page for:
  - Background and Description
  - Design Plan
  - Quality Requirements (Coming Soon)
  - Current Status

No external version of this page is currently available, but will be made
public on the code.google.com project page shortly.

Project Structure:
The project is currently divided into three sections, a Test Generator, which 
generates assembly files to be run, and a Runner, which compiles the assembly
files, uploads them to a remote server, and uses analysis tools to record
user-defined events related to execution.  The third component to the system
is an Analyzer, which iterates through the result files generated by the
Runner, calculates the per instruction event count, and produces a machine-
digestable file containing the results from each execution.

Building the Test Generator and Analyzer:
The Test Generator and Analyzer are written in C++ and can be compiled by
using the make utility.
# make

Running the Test Generator:
# ./TestGenerator [--argument=value]... [--argument]
Currently, two optional command line arguments are available to alter the
operation of the program:
  --instructions=
     - This argument specifies the number of instructions to add to the
       output assembly file.
     - Failure to supply this command line argument results in the value
       defaulting to 100.
  --iterations=
     - This argument specifies the number of times to iterate over the 
       instructions added.
     - Failure to supply this command line argument results in the value
       defaulting to 10,000.
  --verbose
     - This argument triggers verbose mode, printing a notification to
       stdout each time an operation, operand, or test is processed.
  --help
     - Prints help message.

The Test Generator generates assembly instructions by using two data files.
See the data files' comments for more information on usage and formatting.
  - operations.txt
     - Contains information related to assembly operations, such as "add",
       and allows for the specification of a minimum and maximum number of
       possible operands for the operation.
  - operands.txt
     - Contains information related to assembly operation operands, such as
       "%eax".  This file stores both an operand value ("%eax") and an
       operand type ("r32"), both of which are required fields.

The Test Generator will place all generated assembly files, along with a
baseline assembly file, which can be used as a comparison to mitigate the loop
overhead, and an index in a subdirectory (Named with date and time) of the
execution directory.

Running the Runner:
There are two runner scripts in the execution directory, but you only need to
run the first, "runner.sh". For example, you can run the following command:

# sh runner.sh

You will need to put define the following arguments using these flags:
  --testdir, -t
    The name of the directory to be tested.

  --cpuevent, -c
    The name of the CPU event/pfmon command to test for

  --pfmonmachine, -m
    The name of the machine that has pfmon on it

  --pfmonuser, -u
    The username to use on the pfmon machine

  --pfmondirectory, -d
    The path of the directory to use on the pfmon machine

Should one of these arguments not be defined, the script will
automatically terminate.

Other flags: 
  --help
    Prints out the instructions for running the runner along with the list of flags

  --silent, -s
    Silent mode; runner does not print status messages. 

The output from the Runner will be placed in a directory named
identical to that of the Test Generator output directory with "_results"
appended.  Pfmon output may be found in the files within that directory.
Sample pfmon commands may be found within the "pfmoncommands.txt" file. For
further questions or information on pfmon, please refer to the following
website for details: http://perfmon2.sourceforge.net/pfmon_usersguide.html

SPECIAL NOTE: If authentication to the remote server via SSH requires
password authentication, the script will fail.  Instead, be sure that you
have automatic authentication setup between the local and remote hosts.

Running the Analyzer:
# ./Analyzer [--argument=value]... [--argument]...
The Analyzer currently expects one required command line argument.
  --results=
     - This argument specifies the directory created by the Runner script
       that contains the result output files.
     - Failure to supply this command line currently causes the program
       to exit with an error status.  An upcoming feature will make this
       argument optional as the Results directory will be matched by
       regular expression.

Additional command line arguments are optional.
  --instructions=
     - This argument specifies the number of body instructions which were
       generated by the Test Generator within each test.
     - Failure to supply this command will cause the Analyzer to read this
       value from the test_set.dat file within the Results directory.
  --iterations=
     - This argument specifies the number of body iterations which were
       generated by the Test Generator within each test.
     - Failure to supply this command will cause the Analyzer to read this
       value from the test_set.dat file within the Results directory.
  --verbose
     - Displays status messages for each processed result.
  --help
     - Prints help message.

The Analyzer will place the calculated aggregate results from the various
result files in a single file within the Results directory, results.txt.
See that file for information on the formatting of its contents.

Questions/Contact:
Please contact us for any questions unanswered by the README file. 
  - Casey Burkhardt - casey.burkhardt@gmail.com
  - Sweta Mohapatra - s.moha526@gmail.com
