#
# Copyright 2008 Google Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, 5th Floor, Boston, MA 02110-1301, USA.

# Side effect table for instructions
#
# memnonic  defs
#
# with defs being one of:
#    reg    all valid register names are supported. Taking the register
#           names from binutils-2.xx/opcodes/i386-reg.tbl
#
#    op0    instruction def's operand 0  (also 'src')
#    op1    instruction def's operand 1  (also 'exp')
#    ...
#    exp:   all explicit registers in the operation are used
#
#    addr8: all following registers are def'ed in case
#           op0 of the instruction denotes an 8-bit reg
#           or mem. Note: The colon : is required.
#    addr16:
#    addr32:
#    addr64: correspondingly.
#
#    flags: starting to define flags. Valid flag names are:
#          CF PF AF ZF SF TP IF DF OF IOPL NT RF VM AC VIF VIP ID
#
#    clear: indicate which flags are cleared.
#    undef: indicate which flags are left undefined.
#
#    all:  switches back to default mask and def assignment.
#a
aaa   al flags: AF
aad   ax
aam   ax
aas   al flags: AF
adc   exp flags: CF
add   exp
addpd exp
addps exp
addsd exp
addss exp
addsubpd exp
addsubps exp
and   exp
andpd exp
andps exp
andnpd exp
andnps exp
arpl src

#b
blendpd exp
blendps exp
blendvpd exp xmm0
blendvps exp xmm0
bound src
bsf src
bsr src
bswap exp
bt exp
btc exp
btr exp
bts exp

#c
# AMD64 ABI calling convention 
call rsp rbp rip cs rsi rdi rax rdx rcx r8 r9 xmm0 xmm1 xmm2 xmm3 xmm4 xmm5 xmm6 xmm7 exp
#call rsp rip cs
cbw  al
cwde ax
cdqe eax
clc
cld
clflush
cli
clts
cltq eax
cmc flags: CF

cmova   src flags: CF ZF
cmovae  src flags: CF
cmovb   src flags: CF
cmovbe  src flags: CF ZF
cmovc   src flags: CF
cmove   src flags: ZF
cmovg   src flags: ZF SF OF
cmovge  src flags: SF OF
cmovl   src flags: SF OF
cmovle  src flags: ZF SF OF
cmovna  src flags: CF ZF
cmovnae src flags: CF
cmovnb  src flags: CF
cmovnbe src flags: CF ZF
cmovnc  src flags: CF
cmovne  src flags: ZF
cmovng  src flags: ZF SF OF
cmovnge src flags: SF OF
cmovnl  src flags: SF OF
cmovnle src flags: ZF SF OF
cmovno  src flags: OF
cmovnp  src flags: PF
cmovns  src flags: SF
cmovnz  src flags: ZF
cmovo   src flags: OF
cmovp   src flags: PF
cmovs   src flags: SF
cmovz   src flags: ZF

cmp op0 op1
cmppd exp
cmpps exp

#cmpsb, cmpsw and cmpsq are represented as cmps in the opcode table
#The instruction entry doesn't have an operand and hence there is no
#good way to determine the addr size (without looking at the opcode).
#So conservatively assume all registers are used in all modes
cmps   ds es di si edi esi rsi rdi

# these three are mentioned in the Intel manual, but don't have
# an explicit entry in the opcode tables.
# cmpsb  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
# cmpsw  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
# cmpsq  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi

cmpxchg rax exp
cmpxchg8b edx eax ecx ebx
cmpxchg16b rdx rax rcx rbx

comisd exp
comiss exp
cpuid eax ecx
crc32 exp

cvtsi2sd src

cvtdq2pd src
cvtdq2pd src
cvtpd2dq src
cvtpd2dq src
cvtdq2ps src
cvtdq2ps src
cvtpd2pi src
cvtpd2ps src
cvtpd2ps src
cvtps2pd src
cvtps2pd src
cvtps2dq src
cvtps2dq src
cvtsd2si src
cvtsd2si src
cvtsd2ss src
cvtsd2ss src
cvtss2sd src
cvtss2sd src
cvttpd2pi src
cvttsd2si src
cvttsd2si src
cvttpd2dq src
cvttpd2dq src
cvttps2dq src
cvttps2dq src

cwd ax
cdq eax
cqo rax

#d
daa al flags: AF CF
das al flags: AF CF
dec src
div exp addr8: ax addr16: ax dx addr32: eax edx addr64: rax rdx
divpd exp
divps exp
divsd exp
divss exp
dppd exp
dpps exp

#e
#emms
enter rbp rsp
extractps src

#f
#Ignore FP related stuff for now

#h
haddpd exp
haddps exp
hlt
hsubpd exp
hsubps exp

# i
idiv exp addr8: ax addr16: ax dx addr32: eax edx addr64: rax rdx
imul exp addr8: ax addr16: ax addr32: eax addr64: rax
in dx
inc src
ins dx rdi flags: df

insertps exp
#TODO
#int
#invd
#invlpg
#iret

# j
# jumpers
jmp exp
ljmp
ja   flags: CF ZF
jna  flags: CF ZF
jae  flags: CF
jnae flags: CF
jb   flags: CF
jnb  flags: CF
jbe  flags: CF ZF
jnbe flags: CF ZF
jc   flags: CF
jnc  flags: CF
je   flags: ZF
jne  flags: ZF
jg   flags: ZF SF OF
jng  flags: ZF SF OF
jge  flags: SF OF
jnge flags: SF OF
jl   flags: SF OF
jnl  flags: SF OF
jle  flags: SF OF ZF
jnle flags: SF OF ZF
jo   flags: OF
jno  flags: OF
jp   flags: PF
jnp  flags: PF
js   flags: SF
jns  flags: SF
jz   flags: ZF
jnz  flags: ZF
jpe  flags: PF
jpo  flags: PF

jcxz cx
jecxz ecx
jrcxz rcx

#L
lahf flags: SF ZF AF PF OF CF
lar src
lddqu
ldmxcsr

lds
lss
les
lfs
lgs
# lea uses only base and index regs which are included by default
lea

leave rsp rbp
lfence
lgdt
lidt
lldt

lmsw src
lods  ds flags: DF  addr16: si addr32: esi addr64: rsi
# these are in the Intel manual, but taken care of by the mode
# append trick in mao/gas
# lodsb al
# lodsw ax
# lodsd eax
# lodsq rax

loop   rcx
loope  rcx flags: ZF
loopne rcx flags: ZF
loopz  rcx flags: ZF
loopnz rcx flags: ZF

lsl src
ltr src
#m
maskmovdqu exp ds edi
maskmovq exp ds edi
maxpd exp
maxps exp
maxsd exp
maxss exp
mfence
minpd exp
minps exp
minsd exp
minss exp
monitor ds rax

mov  src
movabs src
movapd src
movaps src
movbe src
movd src
movddup src
movdqa src
movdqu src
movdq2q src
movhlps src
movhpd src
movhps src
movlhps src
movlpd src
movlps src
movmskpd src
movmskps src
movntdqa src
movntdq src
movnti src
movntpd src
movntps src
movntq src
movq src
movq2dq src

movs   ecx ds es addr8: si di addr16: si di addr32: esi edi addr64: rsi rdi

movsd   src
movshdup src
movsldup src
movss   src


movupd src
movups src

# various zero and sign extent moves.
movbe src
movsbl src
movsbw src
movswl src
movslq src
movsbq src
movswq src
movsx src
movsxd src

movzbl src
movzbw src
movzbl src
movzbq src
movzbq src
movzwq src
movzx src

mpsadbw exp

mul   exp addr8: al addr16: ax addr32: eax addr64: rax

mulpd exp
mulps exp
mulsd exp
mulss exp

mwait eax ecx
#ER: verified till this point

#N
neg src
nop
not src

#O
or exp
orpd exp
orps exp
out eax dx
outs dx flags: DF addr8: si addr16: si addr32: esi addr64: rsi
pabsb src
pabsw src
pabsd src
packsswb exp
packssdw exp
packusdw exp
packuswb exp
paddb    exp
paddw    exp
paddd    exp
paddq    exp
paddsb   exp
paddsw   exp
paddusb  exp
paddusw  exp
palignr  exp
pand     exp
pandn    exp
pause
pavgb    exp
pavgw    exp
pblendvb exp
pblendw  exp
pcmpeqb  exp
pcmpeqw  exp
pcmpeqd  exp
pcmpeqq  exp
pcmpestri exp eax edx rax rdx
pcmpestrm exp eax edx rax rdx
pcmpistri exp
pcmpistrm exp
pcmpgtb  exp
pcmpgtw  exp
pcmpgtd  exp
pcmpgtq  exp
pcmpgtb  exp
pcmpgtw  exp
pcmpgtd  exp
pcmpgtq  exp
pextrb   exp
pextrd   exp
pextrq   exp
pextrw   exp
phaddw   exp
phaddd   exp
phaddsw  exp
phminposuw exp
phsubw   exp
phsubd   exp
phsubsw  exp
pinsrb   exp
pinsrd   exp
pinsrq   exp
pinsrw   exp
pmaddubsw exp
pmaddwd   exp
pmaxsb    exp
pmaxsd    exp
pmaxsw    exp
pmaxub    exp
pmaxud    exp
pmaxuw    exp
pminsb    exp
pminsd    exp
pminsw    exp
pminub    exp
pminud    exp
pminuw    exp

pmovmskb  exp
pmovsxbw  exp
pmovsxbd  exp
pmovsxbq  exp

pmovsxwd  exp
pmovsxwq  exp
pmovsxdq  exp

pmovzxbw  exp
pmovzxbd  exp
pmovzxbq  exp
pmovzxwd  exp
pmovzxwq  exp
pmovzxdq  exp

pmuldq    exp
pmulhrsw  exp
pmulhuw   exp
pmulhw    exp
pmulld    exp
pmullw    exp
pmuludq   exp
pop rsp
popa rsp
# taken care of by mode append
#popad rsp
popcnt src
popf rsp

# taken care of by mode append
# popfd rsp
# popfq rsp

por src
# These three prefetches are named differently in the Intel manual:
# prefetch0, prefetch1, prefetch2
#
prefetcht0
prefetcht1
prefetcht2
prefetchnta

psadbw  exp
pshufb  exp
pshufd  exp
pshufhw exp
pshuflw exp
pshufw  exp
psignb  exp
psignw  exp
psignd  exp
pslldq  exp
psllw   exp
pslld   exp
psllq   exp
psraw   exp
psrad   exp
psrldq  exp
psrlw   exp
psrld   exp
psrlq   exp
psubb   exp
psubw   exp
psubd   exp
psubq   exp
psubsb  exp
psubsw  exp
psubusb  exp
psubusw  exp
ptest exp
# For punpckh.. and punpckl.., Intel and AT&T differ in the final
# characters.
#
punpckhbw  exp
punpckhdq  exp
punpckhwd  exp

punpcklbw  exp
punpckldq  exp
punpcklwd  exp

punpckhqdq exp
punpcklqdq exp

# TODO: refine by build model
push   rsp src
pusha  rsp  edi  esi  ebp  ebx  edx  ecx  eax
# taken care of by mode append:
# pushad rsp  edi  esi  ebp  ebx  edx  ecx  eax

pushf  rsp eflags
# taken care of by mode append:
# pushfd rsp eflags
# pushfq rsp eflags

pxor  exp 

# R
rcl exp cl flags: CF
rcr exp cl flags: CF
rol exp cl flags: CF
ror exp cl flags: CF
rcpps src
rcpps src

rdmsr ecx
rdpmc ecx
rdtsc
rdtscp

#reps are tricky to handle since their operands is based
#on what follows the rep. Handle them conservatively
#Further complicated by th fact that registers used depends
#on REX prefix
rep  exp ds es ax eax rax cx ecx rcx dx si esi rsi di edi rdi
repe  exp ds es ax eax rax cx ecx rcx si esi rsi di edi rdi flags: ZF
repz  exp ds es ax eax rax cx ecx rcx si esi rsi di edi rdi flags: ZF
repne  exp ds es ax eax rax cx ecx rcx si esi rsi di edi rdi flags: ZF
repnz  exp ds es ax eax rax cx ecx rcx si esi rsi di edi rdi flags: ZF

#The data deps for ret is probably not very useful. Every insn
#uses and defs rip, but it is not specified. So there won't be
#any data deps on rip
ret rip rsp

roundpd  src
roundps  src
roundsd  src
roundss  src
rsm
rsqrtps  src
rsqrtss  src

# S
sahf ah
# for shift instructions with CL as shift amount
# no need to add cl as an implicit reg - it has
# to be an explicit operand
sal exp
sar exp
shl exp
shr exp

sbb exp flags: CF
scas  es rdi rax

seta   flags: CF ZF
setna  flags: CF ZF
setae  flags: CF
setnae flags: CF
setb   flags: CF
setnb  flags: CF
setbe  flags: CF ZF
setnbe flags: CF ZF
setc   flags: CF
setnc  flags: CF
sete   flags: ZF
setne  flags: ZF
setg   flags: ZF SF OF
setng  flags: ZF SF OF
setge  flags: SF OF
setnge flags: SF OF
setl   flags: SF OF
setnl  flags: SF OF
setle  flags: SF OF ZF
setnle flags: SF OF ZF
seto   flags: OF
setno  flags: OF
setp   flags: PF
setnp  flags: PF
sets   flags: SF
setns  flags: SF
setz   flags: ZF
setnz  flags: ZF
setpe  flags: PF
setpo  flags: PF
sfence

sgdt

shld exp
shrd exp
shufpd exp
shufps exp
sidt
sldt
smsw
sqrtpd src
sqrtps src
sqrtsd src
sqrtss src
stc
std
sti
stmxcsr mxcsr
stos  rax addr8: di addr16: di addr32: edi addr64: rdi flags: DF
# taken care of by mode append:
# stosb src addr8: di addr16: di addr32: edi addr64: rdi flags: DF
# stosw src addr8: di addr16: di addr32: edi addr64: rdi flags: DF
# stosd src addr8: di addr16: di addr32: edi addr64: rdi flags: DF
# stosq src addr8: di addr16: di addr32: edi addr64: rdi flags: DF

str tr0 tr1 tr2 tr3 tr4 tr5 tr6 tr7

sub   exp addr8: al addr16: ax addr32: eax addr64: rax
subpd exp
subps exp
subsd exp
subss exp
#swapgs
#Not sure about the use set of the sys* ins
#syscall rip eflags
#sysenter
#sysexit
#sysret


# T
test exp addr8: al addr16: ax addr32: eax addr64: rax

# U
ucomisd exp
ucomiss exp
#ud2 -undefined ins!
unpckhpd exp
unpckhps exp
unpcklpd exp
unpcklps exp

#V
verr src
verw src

# W
wait
fwait
wbinvd
wrmsr edx eax ecx

# X
xadd exp
xchg exp addr8: ax addr16: ax addr32: eax addr64: rax
xgetbv ecx
xlat  ds rbx al
# taken care of by mode append
# xlatb al
xor exp addr8: al addr16: ax addr32: eax addr64: rax
xorpd exp
xorps exp
xrstor edx eax
#xsave - could save all of processor state
xsetbv edx eax ecx
